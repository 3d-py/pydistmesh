{"name":"PyDistMesh","body":"PyDistMesh is a simple Python code for generating unstructured\r\ntriangular and tetrahedral meshes using *signed distance functions*. It\r\nintends to have the same functionality as and similar interface to the\r\nMATLAB-based [DistMesh](http://persson.berkeley.edu/distmesh/).\r\nLike DistMesh, upon which it is based, PyDistMesh is distributed under the [GNU GPL](http://www.gnu.org/copyleft/gpl.html).\r\n\r\n## 2-D Examples\r\n\r\n* Uniform Mesh on Unit Circle:\r\n  ```\r\n  >>> import distmesh as dm\r\n  >>> import numpy as np\r\n  >>> fd = lambda p: np.sqrt((p**2).sum(1))-1.0\r\n  >>> p, t = dm.distmesh2d(fd, dm.huniform, 0.2, (-1,-1,1,1))\r\n  ```\r\n\r\n* Rectangle with circular hole, refined at circle boundary:\r\n  ```\r\n  >>> import distmesh as dm\r\n  >>> fd = lambda p: dm.ddiff(dm.drectangle(p,-1,1,-1,1),\r\n  ...                         dm.dcircle(p,0,0,0.5))\r\n  >>> fh = lambda p: 0.05+0.3*dm.dcircle(p,0,0,0.5)\r\n  >>> p, t = dm.distmesh2d(fd, fh, 0.05, (-1,-1,1,1),\r\n  ...                      [(-1,-1),(-1,1),(1,-1),(1,1)])\r\n  ```\r\n\r\n## 3-D Examples\r\n\r\n* 3-D Unit ball:\r\n  ```\r\n  >>> import distmesh as dm\r\n  >>> import numpy as np\r\n  >>> fd = lambda p: np.sqrt((p**2).sum(1))-1.0\r\n  >>> p, t = dm.distmeshnd(fd, dm.huniform, 0.2, (-1,-1,-1, 1,1,1))\r\n  ```\r\n\r\n* Cylinder with hole:\r\n  ```\r\n  >>> import distmesh as dm\r\n  >>> import numpy as np\r\n  >>> def fd10(p):\r\n  ...     r, z = np.sqrt(p[:,0]**2 + p[:,1]**2), p[:,2]\r\n  ...     d1, d2, d3 = r-1.0, z-1.0, -z-1.0\r\n  ...     d4, d5 = np.sqrt(d1**2+d2**2), np.sqrt(d1**2+d3**2)\r\n  ...     d = dm.dintersect(dm.dintersect(d1, d2), d3)\r\n  ...     ix = (d1>0)*(d2>0); d[ix] = d4[ix]\r\n  ...     ix = (d1>0)*(d3>0); d[ix] = d5[ix]\r\n  ...     return dm.ddiff(d, dm.dsphere(p, 0,0,0, 0.5))\r\n  >>> def fh10(p):\r\n  ...     h1 = 4*np.sqrt((p**2).sum(1))-1.0\r\n  ...     return np.minimum(h1, 2.0)\r\n  >>> p, t = dm.distmeshnd(fd10, fh10, 0.1, (-1,-1,-1, 1,1,1))\r\n\r\n## Demos\r\n\r\nFor a quick demonstration, run:\r\n```\r\n$ python -m distmesh.demo2d\r\n```\r\n\r\nor:\r\n```\r\n$ pythom -m distmesh.demond\r\n```\r\n\r\n## Dependencies\r\n\r\nPyDistMesh is compatible with both Python 2 and Python 3. (The author\r\nhas only tested it in Python 2.7 and Python 3.2). It requires several\r\ncommon Python packages:\r\n\r\n* [NumPy](http://numpy.scipy.org/)\r\n* [SciPy](http://scipy.org/)\r\n* [matplotlib](http://matplotlib.sourceforge.net/) (optional)\r\n\r\nBuilding the package requires a C compiler and [LAPACK](http://www.netlib.org/lapack/).\r\n[Cython](http://cython.org/), if available, can be used to rebuild the extension module bindings.\r\n\r\n## References\r\nThe DistMesh algorithm is described in the following two references.\r\nIf you use the algorithm in a program or publication, please\r\nacknowledge its authors by adding a reference to the first paper\r\nbelow.\r\n\r\n* P.-O. Persson, G. Strang, **A Simple Mesh Generator in MATLAB**.\r\n  *SIAM Review*, Volume 46 (2), pp. 329-345, June 2004 ([PDF](http://persson.berkeley.edu/distmesh/persson04mesh.pdf))\r\n\r\n* P.-O. Persson, **Mesh Generation for Implicit Geometries**.\r\n  Ph.D. thesis, *Department of Mathematics, MIT*, Dec 2004 ([PDF]  (http://persson.berkeley.edu/thesis/persson-thesis-color.pdf))","tagline":"A Simple Mesh Generator in Python","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}